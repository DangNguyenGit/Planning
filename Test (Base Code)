 ------Adding Images into the Game-----
 
 JFrame frame = new JFrame();
        ImageIcon icon = new ImageIcon("src\\showimage\\beach2.jpg");
        JLabel label = new JLabel(icon);
        frame.add(label);
        frame.setDefaultCloseOperation
         (JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setSize(400, 400);
        frame.setVisible(true);
      
------Adding Music to Game------
void playMusic (String musicLocation)
{
  try{
     file musicpath = new File (musiclocation);
     if (musicpath.exists())
     {
        AudioInputStream audioInput = AudioSystem.getAudioInputStream(musicPath);
        Clip clip = AudioSystem.getClip();
        clip.start();
        
        JOptionPane.showMessageDialog(null, "Press ok to stop playing");
        
     }
     else
     {
        System.out.println("Can't find file");
     }
  }
}
catch (Exception ex)
{
ex.printStackTrace();
}
}
}

-----Paddle Movements Code-----
@Override
    public void keyPressed(KeyEvent e) { 
        if(e.getKeyCode() == KeyEvent.VK_SPACE){
            if (!play){
                play = true;
                ballPosX = 340;
                ballPosY = 480;
                paddlePosX = 300;
                ballDirX = -1;
                ballDirY = -2;
                totalBricks = 50;
                mapAccess = new BrickMap(5,10);
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_LEFT && play==true){
            if(paddlePosX <= 10){
                paddlePosX = 10;
            }
            else{
                moveLeft();
            }
        }
        if(e.getKeyCode() == KeyEvent.VK_RIGHT && play==true){
            if(paddlePosX >= 585){
                paddlePosX = 585;
            }
            else{
                moveRight();
            }
        }
    }
    
    @Override
    public void keyTyped(KeyEvent e){      
    }
    @Override
    public void keyReleased(KeyEvent e){ 
    }    
    public void moveLeft(){
        paddlePosX -= 20;
    }
    public void moveRight(){
        paddlePosX += 20;
    }
      
-----Ball Movement Code-----
ballPosX += ballDirX;
            ballPosY += ballDirY;
            if(ballPosX<10){
                ballDirX = -ballDirX;
            }
            if(ballPosX>665){
                ballDirX = -ballDirX;
            }
            if(ballPosY<10){
                ballDirY = -ballDirY;
            }
-----Ball Collision With Objects (Code Specific With Bricks)-----
if(ballRect.intersects(brickRect)){
                            mapAccess.setBrickValue(0,i,j);
                            sound2.playSoundEffect1(secondSound);
                            totalBricks--;
                            if(ballPosX +19<=brickRect.x || ballPosX+1 >=brickRect.x + brickRect.width){
                                ballDirX = -ballDirX;
                            }
                            else{
                                ballDirY = -ballDirY;
                            }
-----The In-Game Challenges-----
public void challenges(){
        if(totalBricks <= 48){
            int chooseChallenge = r.nextInt(8);
            switch(chooseChallenge){
                case 2:
                    System.out.println("0");
                    ballDirY = 1;
                    break;
                case 1:
                    System.out.println("1");
                    ballDirY = 4;
                    break;
                case 0:
                    System.out.println("2");
                    fastPaddle = false;                    
                    slowPaddle = true;
                    break;
                case 3:
                    slowPaddle = false;
                    fastPaddle = true;
                    break;
                default:
                    ballDirY = 4;
                    slowPaddle = false;
                    fastPaddle = false;
            }        
        }
    }
    
    -----Brick Map Class Code-----
    
    public BrickMap(int row, int column){
        brickLayout = new int[row][column];
        for(int i = 0; i<brickLayout.length; i++){
            for(int j = 0; j< brickLayout[0].length;j++){
                brickLayout[i][j] = 1;
            }
        }
    brickWidth = 600/column;
    brickHeight = 150/row;
    }
    public void draw(Graphics2D g){
        for(int i = 0; i<brickLayout.length; i++){
            for(int j = 0; j< brickLayout[0].length;j++){
                if(brickLayout[i][j] > 0){
                    g.setColor(Color.BLACK);
                    g.fillRect(j*brickWidth+48, i*brickHeight+80, brickWidth, brickHeight);
                    g.setStroke(new BasicStroke(3));
                    g.setColor(Color.WHITE);
                    g.drawRect(j*brickWidth+48, i*brickHeight+80, brickWidth, brickHeight);
                }
            }
        }        
    }
    
    public void setBrickValue(int value, int row, int column){
        brickLayout[row][column] = value;
